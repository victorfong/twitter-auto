// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/victorfong/twitter-auto/model (interfaces: Database)

package mock

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	. "github.com/victorfong/twitter-auto/model"
)

// Mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *_MockDatabaseRecorder
}

// Recorder for MockDatabase (not exported)
type _MockDatabaseRecorder struct {
	mock *MockDatabase
}

func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &_MockDatabaseRecorder{mock}
	return mock
}

func (_m *MockDatabase) EXPECT() *_MockDatabaseRecorder {
	return _m.recorder
}

func (_m *MockDatabase) Init() {
	_m.ctrl.Call(_m, "Init")
}

func (_mr *_MockDatabaseRecorder) Init() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init")
}

func (_m *MockDatabase) Exec(strStatement string) (sql.Result, error) {
	ret := _m.ctrl.Call(_m, "Exec", strStatement)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) Exec(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exec", arg0)
}

func (_m *MockDatabase) InsertFollower(follower Follower) error {
	ret := _m.ctrl.Call(_m, "InsertFollower", follower)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) InsertFollower(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InsertFollower", arg0)
}

func (_m *MockDatabase) SyncFollowers(ids []int64) error {
	ret := _m.ctrl.Call(_m, "SyncFollowers", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) SyncFollowers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SyncFollowers", arg0)
}

func (_m *MockDatabase) SyncFollowings(id []int64) error {
	ret := _m.ctrl.Call(_m, "SyncFollowings", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) SyncFollowings(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SyncFollowings", arg0)
}
